name: Build and Deploy BackendApp to ECS

on:
  push:
    branches:
      - main

env:
  # Setting an environment variable with the value of a configuration variable
  ECR_BACKEND_IMAGE: ${{ vars.ECR_BACKEND_IMAGE }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_BACKEND_SERVICE: ${{ vars.ECS_BACKEND_SERVICE }}
  RDS_USER: ${{ vars.RDS_USER }}
  RDS_PASSWORD: ${{ vars.RDS_PASSWORD }}
  RDS_HOST: ${{ vars.RDS_HOST }}
  RDS_PORT: ${{ vars.RDS_PORT }}
  RDS_NAME: ${{ vars.RDS_NAME }}
  OAI_KEY: ${{ vars.OAI_KEY }}
  SDUSERNAME: ${{ vars.SDUSERNAME }}
  SDPASSWORD: ${{ vars.SDPASSWORD }}
  SDBASIC_AUTH_TOKEN: ${{ vars.SDBASIC_AUTH_TOKEN }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create env file
        run: |
          touch app/.env
          echo DB_USER="$RDS_USER" >> app/.env
          echo DB_PASSWORD="$RDS_PASSWORD" >> app/.env
          echo DB_HOST="$RDS_HOST" >> app/.env
          echo DB_PORT=$RDS_PORT >> app/.env
          echo DB_NAME="$RDS_NAME" >> app/.env
          echo OAI_KEY=$OAI_KEY >> app/.env
          echo SDUSERNAME="$SDUSERNAME" >> app/.env
          echo SDPASSWORD="$SDPASSWORD" >> app/.env
          echo SDBASIC_AUTH_TOKEN="$SDBASIC_AUTH_TOKEN" >> app/.env
          echo ACCESS_TOKEN_EXPIRE_MINUTES=1440 >> app/.env
          echo ALGORITHM="HS256" >> app/.env
          echo SECRET_KEY="84f79fbb77410c4ff2df367a03acc88440c8cce2e5a0271394038e35d9095256" >> app/.env
          echo tusDatosUser="Yolanda@konempleo.com" >> app/.env
          echo tusDatosSecret="Konempleo2022" >> app/.env

      - name: Set up QEMU for x86_64
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: runner.os == 'Linux'

      - name: Set up Docker for x86_64
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/x86_64

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t konempleo .

      - name: Tag Docker image with ECS task definition
        run: |
          docker tag konempleo:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_BACKEND_IMAGE:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_BACKEND_IMAGE:latest

      - name: Deploy to EC2 instance via SSH
        env:
          PEM_KEY: ${{ secrets.AWS_PEM_KEY }}
        run: |
          echo "$PEM_KEY" > konempleo.pem
          chmod 400 konempleo.pem
          ssh -o StrictHostKeyChecking=no -i konempleo.pem -tt ec2-user@ec2-18-118-173-102.us-east-2.compute.amazonaws.com <<EOF
          docker stop konempleo
          docker rm konempleo
          docker system prune -a --volumes -f
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          echo "Pulling docker"
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_BACKEND_IMAGE:latest
          echo "Running docker"
          docker run -d --name konempleo -p 80:80 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_BACKEND_IMAGE:latest
          echo "Docker running"
          exit
          EOF
